// Code generated by mockery v2.49.1. DO NOT EDIT.

package musicinfo

import (
	mock "github.com/stretchr/testify/mock"
	musicinfo "github.com/zhorzh-p/LyricLibrary/internal/domain/clients/musicinfo"
)

// SongDetailsClient is an autogenerated mock type for the SongDetailsClient type
type SongDetailsClient struct {
	mock.Mock
}

type SongDetailsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SongDetailsClient) EXPECT() *SongDetailsClient_Expecter {
	return &SongDetailsClient_Expecter{mock: &_m.Mock}
}

// GetSongInfo provides a mock function with given fields: group, name
func (_m *SongDetailsClient) GetSongInfo(group string, name string) (*musicinfo.SongInfoResponse, error) {
	ret := _m.Called(group, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSongInfo")
	}

	var r0 *musicinfo.SongInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*musicinfo.SongInfoResponse, error)); ok {
		return rf(group, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *musicinfo.SongInfoResponse); ok {
		r0 = rf(group, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*musicinfo.SongInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(group, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongDetailsClient_GetSongInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSongInfo'
type SongDetailsClient_GetSongInfo_Call struct {
	*mock.Call
}

// GetSongInfo is a helper method to define mock.On call
//   - group string
//   - name string
func (_e *SongDetailsClient_Expecter) GetSongInfo(group interface{}, name interface{}) *SongDetailsClient_GetSongInfo_Call {
	return &SongDetailsClient_GetSongInfo_Call{Call: _e.mock.On("GetSongInfo", group, name)}
}

func (_c *SongDetailsClient_GetSongInfo_Call) Run(run func(group string, name string)) *SongDetailsClient_GetSongInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SongDetailsClient_GetSongInfo_Call) Return(_a0 *musicinfo.SongInfoResponse, _a1 error) *SongDetailsClient_GetSongInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongDetailsClient_GetSongInfo_Call) RunAndReturn(run func(string, string) (*musicinfo.SongInfoResponse, error)) *SongDetailsClient_GetSongInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewSongDetailsClient creates a new instance of SongDetailsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongDetailsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongDetailsClient {
	mock := &SongDetailsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
