// Code generated by mockery v2.49.1. DO NOT EDIT.

package music

import (
	mock "github.com/stretchr/testify/mock"
	music "github.com/zhorzh-p/LyricLibrary/internal/domain/repositories/music"
)

// GroupDatabaseRepository is an autogenerated mock type for the GroupDatabaseRepository type
type GroupDatabaseRepository struct {
	mock.Mock
}

type GroupDatabaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupDatabaseRepository) EXPECT() *GroupDatabaseRepository_Expecter {
	return &GroupDatabaseRepository_Expecter{mock: &_m.Mock}
}

// GetByName provides a mock function with given fields: name, loadSongs, loadSongVerses
func (_m *GroupDatabaseRepository) GetByName(name string, loadSongs bool, loadSongVerses bool) (*music.GroupEntity, error) {
	ret := _m.Called(name, loadSongs, loadSongVerses)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *music.GroupEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool, bool) (*music.GroupEntity, error)); ok {
		return rf(name, loadSongs, loadSongVerses)
	}
	if rf, ok := ret.Get(0).(func(string, bool, bool) *music.GroupEntity); ok {
		r0 = rf(name, loadSongs, loadSongVerses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*music.GroupEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool, bool) error); ok {
		r1 = rf(name, loadSongs, loadSongVerses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupDatabaseRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type GroupDatabaseRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - name string
//   - loadSongs bool
//   - loadSongVerses bool
func (_e *GroupDatabaseRepository_Expecter) GetByName(name interface{}, loadSongs interface{}, loadSongVerses interface{}) *GroupDatabaseRepository_GetByName_Call {
	return &GroupDatabaseRepository_GetByName_Call{Call: _e.mock.On("GetByName", name, loadSongs, loadSongVerses)}
}

func (_c *GroupDatabaseRepository_GetByName_Call) Run(run func(name string, loadSongs bool, loadSongVerses bool)) *GroupDatabaseRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool), args[2].(bool))
	})
	return _c
}

func (_c *GroupDatabaseRepository_GetByName_Call) Return(_a0 *music.GroupEntity, _a1 error) *GroupDatabaseRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupDatabaseRepository_GetByName_Call) RunAndReturn(run func(string, bool, bool) (*music.GroupEntity, error)) *GroupDatabaseRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupDatabaseRepository creates a new instance of GroupDatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupDatabaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupDatabaseRepository {
	mock := &GroupDatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
