// Code generated by mockery v2.49.1. DO NOT EDIT.

package music

import (
	mock "github.com/stretchr/testify/mock"
	music "github.com/zhorzh-p/LyricLibrary/internal/domain/repositories/music"
)

// SongDatabaseRepository is an autogenerated mock type for the SongDatabaseRepository type
type SongDatabaseRepository struct {
	mock.Mock
}

type SongDatabaseRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SongDatabaseRepository) EXPECT() *SongDatabaseRepository_Expecter {
	return &SongDatabaseRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: song
func (_m *SongDatabaseRepository) Create(song *music.SongEntity) error {
	ret := _m.Called(song)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*music.SongEntity) error); ok {
		r0 = rf(song)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongDatabaseRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SongDatabaseRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - song *music.SongEntity
func (_e *SongDatabaseRepository_Expecter) Create(song interface{}) *SongDatabaseRepository_Create_Call {
	return &SongDatabaseRepository_Create_Call{Call: _e.mock.On("Create", song)}
}

func (_c *SongDatabaseRepository_Create_Call) Run(run func(song *music.SongEntity)) *SongDatabaseRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*music.SongEntity))
	})
	return _c
}

func (_c *SongDatabaseRepository_Create_Call) Return(_a0 error) *SongDatabaseRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongDatabaseRepository_Create_Call) RunAndReturn(run func(*music.SongEntity) error) *SongDatabaseRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *SongDatabaseRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongDatabaseRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SongDatabaseRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *SongDatabaseRepository_Expecter) Delete(id interface{}) *SongDatabaseRepository_Delete_Call {
	return &SongDatabaseRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *SongDatabaseRepository_Delete_Call) Run(run func(id uint)) *SongDatabaseRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *SongDatabaseRepository_Delete_Call) Return(_a0 error) *SongDatabaseRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongDatabaseRepository_Delete_Call) RunAndReturn(run func(uint) error) *SongDatabaseRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilter provides a mock function with given fields: filter, offset, limit
func (_m *SongDatabaseRepository) GetByFilter(filter music.SongFilter, offset int, limit int) ([]music.SongEntity, error) {
	ret := _m.Called(filter, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []music.SongEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(music.SongFilter, int, int) ([]music.SongEntity, error)); ok {
		return rf(filter, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(music.SongFilter, int, int) []music.SongEntity); ok {
		r0 = rf(filter, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]music.SongEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(music.SongFilter, int, int) error); ok {
		r1 = rf(filter, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongDatabaseRepository_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type SongDatabaseRepository_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - filter music.SongFilter
//   - offset int
//   - limit int
func (_e *SongDatabaseRepository_Expecter) GetByFilter(filter interface{}, offset interface{}, limit interface{}) *SongDatabaseRepository_GetByFilter_Call {
	return &SongDatabaseRepository_GetByFilter_Call{Call: _e.mock.On("GetByFilter", filter, offset, limit)}
}

func (_c *SongDatabaseRepository_GetByFilter_Call) Run(run func(filter music.SongFilter, offset int, limit int)) *SongDatabaseRepository_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(music.SongFilter), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *SongDatabaseRepository_GetByFilter_Call) Return(_a0 []music.SongEntity, _a1 error) *SongDatabaseRepository_GetByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongDatabaseRepository_GetByFilter_Call) RunAndReturn(run func(music.SongFilter, int, int) ([]music.SongEntity, error)) *SongDatabaseRepository_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, entity
func (_m *SongDatabaseRepository) Update(id uint, entity *music.SongEntity) error {
	ret := _m.Called(id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *music.SongEntity) error); ok {
		r0 = rf(id, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongDatabaseRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type SongDatabaseRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id uint
//   - entity *music.SongEntity
func (_e *SongDatabaseRepository_Expecter) Update(id interface{}, entity interface{}) *SongDatabaseRepository_Update_Call {
	return &SongDatabaseRepository_Update_Call{Call: _e.mock.On("Update", id, entity)}
}

func (_c *SongDatabaseRepository_Update_Call) Run(run func(id uint, entity *music.SongEntity)) *SongDatabaseRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(*music.SongEntity))
	})
	return _c
}

func (_c *SongDatabaseRepository_Update_Call) Return(_a0 error) *SongDatabaseRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongDatabaseRepository_Update_Call) RunAndReturn(run func(uint, *music.SongEntity) error) *SongDatabaseRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewSongDatabaseRepository creates a new instance of SongDatabaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongDatabaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongDatabaseRepository {
	mock := &SongDatabaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
