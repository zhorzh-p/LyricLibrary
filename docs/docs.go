// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "получает данные библиотеки с фильтрацией по всем полям и пагинацией",
                "produces": [
                    "application/json"
                ],
                "summary": "получить данные библиотеки с фильтрацией по всем полям и пагинацией",
                "parameters": [
                    {
                        "type": "string",
                        "description": "параметр фильтра по имени",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "параметр фильтра по группе",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "dd.mm.YYYY",
                        "example": "01.06.2006",
                        "description": "параметр фильтра по дате публикации",
                        "name": "release_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "параметр фильтра по минимальному значению куплета",
                        "name": "verse_min_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "параметр фильтра по максимальному значению куплета",
                        "name": "verse_max_number",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset свиг позиций куплетов от начальной",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit максимальное кол-во выводящихся куплетов",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "выводит данные, соответствующие фильтрам и условиям",
                        "schema": {
                            "$ref": "#/definitions/api.GetVersesResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "Данные в библиотеке не найдены",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            },
            "post": {
                "description": "Добавляет новую песню в базу данных",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Добавление песни",
                "parameters": [
                    {
                        "description": "Тело запроса",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateSongRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.CreateSongResponse"
                        }
                    },
                    "400": {
                        "description": "Неверные данные",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Системная ошибка",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/{id}": {
            "put": {
                "description": "Обновляет данные песни по её уникальному идентификатору (ID). Можно изменить имя, группу и другие данные.",
                "produces": [
                    "application/json"
                ],
                "summary": "изменить песню по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id песни, которую необходимо обновить",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Тело запроса",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ChangeSongRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Песня успешно обновлена",
                        "schema": {
                            "$ref": "#/definitions/api.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат данных",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "Песня с указанным ID не найдена",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет песню из базы данных по её уникальному идентификатору (ID)",
                "produces": [
                    "application/json"
                ],
                "summary": "Удалить песню по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID песни, которую необходимо удалить",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Песня успешно удалена",
                        "schema": {
                            "$ref": "#/definitions/api.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Неверные данные запроса",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Системная ошибка",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        },
        "/{id}/verses": {
            "get": {
                "description": "получает текста песни с пагинацией по куплетам",
                "produces": [
                    "application/json"
                ],
                "summary": "получить текста песни с пагинацией по куплетам",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id песни, куплеты которой необходимо получить",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset свиг позиций куплетов от начальной",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limit максимальное кол-во выводящихся куплетов",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "выводит куплеты, соответствующие условиям",
                        "schema": {
                            "$ref": "#/definitions/api.GetVersesResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат данных",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "404": {
                        "description": "Песня с указанным ID не найдена",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/api.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ApiError": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Описание ошибки",
                    "type": "string"
                }
            }
        },
        "api.ChangeSongRequest": {
            "type": "object",
            "properties": {
                "link": {
                    "description": "Новая ссылка",
                    "type": "string",
                    "example": "youtube.com"
                },
                "name": {
                    "description": "Новое название",
                    "type": "string",
                    "example": "Aerials"
                },
                "release_date": {
                    "description": "Новая дата релиза",
                    "type": "string",
                    "example": "11.06.2002"
                }
            }
        },
        "api.CreateSongRequest": {
            "type": "object",
            "required": [
                "group",
                "song"
            ],
            "properties": {
                "group": {
                    "description": "Название группы-исполнителя песни",
                    "type": "string",
                    "example": "Muse"
                },
                "song": {
                    "description": "Название песни",
                    "type": "string",
                    "example": "Supermassive Black Hole"
                }
            }
        },
        "api.CreateSongResponse": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "description": "Идентификатор песни",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "api.EmptyResponse": {
            "type": "object"
        },
        "api.GetVersesResponse": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "Информация о странице",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.PageData"
                        }
                    ]
                },
                "verses": {
                    "description": "Список куплетов",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.VerseData"
                    }
                }
            }
        },
        "api.PageData": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Количество элементов на странице",
                    "type": "integer"
                },
                "page": {
                    "description": "Текущая страница",
                    "type": "integer"
                }
            }
        },
        "api.VerseData": {
            "type": "object",
            "properties": {
                "order": {
                    "description": "ПОрядок куплета",
                    "type": "integer",
                    "example": 1
                },
                "text": {
                    "description": "Текст куплета",
                    "type": "string",
                    "example": "This is a verse text"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/songs",
	Schemes:          []string{},
	Title:            "Lyric Library API",
	Description:      "Сервер для реализации библиотеки музыки. Создан для выполнения тестового задания.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
